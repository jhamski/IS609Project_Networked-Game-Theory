Networked Game Theory
========================================================
author: J. Hamski
date: May 25, 2016
autosize: true


```{r, message=FALSE, warning=FALSE, echo=FALSE}
library(igraph)
library(ggplot2)
library(knitr)
```


Prisoner's Dilemma
========================================================

```{r, echo=FALSE}
set.seed(141)
```

```{r, echo=FALSE}
g.1 <- graph_from_literal(a---b)

#randomply select strategy
# 1 = defect, 2 = cooperate
V(g.1)$strategy <- sample(c(1,2), size = length(V(g.1)), replace = T)

V(g.1)[strategy == 1]$color <- 'red' # defect
V(g.1)[strategy == 2]$color <- 'blue' # cooperate
```



```{r, echo=FALSE}
plot(g.1)
```


Setup Random Graph
========================================================

```{r, echo=FALSE}
set.seed(1412)
```


```{r}
nodes <- 20
degree <- 2
g.1 <- degree.sequence.game(rep(degree, nodes), method =  "vl")
```

```{r, echo=FALSE}
#randomply select strategy
# 1 = defect, 2 = cooperate
V(g.1)$strategy <- sample(c(1,2), size = length(V(g.1)), replace = T)

V(g.1)[strategy == 1]$color <- 'red' # defect
V(g.1)[strategy == 2]$color <- 'blue' # cooperate
```


Graph with Strategies
========================================================

```{r, echo=FALSE}
plot(g.1)
```
Evaluate Network - Find strategy of each opponent
========================================================

```{r, echo=F}
max.degree <- function(g){
  
  degree.list <- NULL
  
  for(i in V(g)){
    degree.list <- c(degree.list, degree(g = g, v = i))
  }
  
  return(max(degree.list))
}
```


```{r}
network.evaluation <- function(g, nodes){
  network.results <- NULL
  max.degree <- max.degree(g)
  
  for(i in 1:nodes){
    opponents <- neighbors(g, i, mode="all")
    opponent.results <- array(NA, max.degree)
  
    for(j in 1:length(opponents)){
      opponent.results[j] <- opponents[j]$strategy
    }
    network.results <- rbind(network.results, opponent.results)
  }
  return(network.results)
}
```

Evaluate Network - Calculate Game Results
========================================================

```{r}
game.evaluation <- function(results, nodes, g){
  row.names(results) <- 1:nodes
  results <- cbind(results, V(g)$strategy)
  sentence.list <- NULL
  
  for(i in 1:length(results[,1])){
    if(results[i,1] == 1){ #row defects
        opponent.sum <- sum(results[i,-1])
        if(opponent.sum == 2){sentence.list = c(sentence.list, 0)}
        if(opponent.sum == 3){sentence.list = c(sentence.list, 6)}
        if(opponent.sum == 4){sentence.list = c(sentence.list, 12)}
    }
    else{
        opponent.sum <- sum(results[i,-1])
        if(opponent.sum == 2){sentence.list = c(sentence.list, 1)}
        if(opponent.sum == 3){sentence.list = c(sentence.list, 4)}
        if(opponent.sum == 4){sentence.list = c(sentence.list, 8)}
    }
  }
  return(sentence.list)
}
```

Evaluate Network - Calculate Game Results
========================================================

```{r, echo=F}
r <- network.evaluation(g.1, nodes)
r.list <- game.evaluation(r, nodes, g.1)
```


```{r, echo=F}
results.graph <- function(results.list, nodes, g){
  for(i in 1:nodes){
    V(g)[i]$result <- results.list[i]
  }
  return(g)
}
```

```{r, echo=F}
g.results <- results.graph(r.list, nodes, g.1)

results <- cbind(1:nodes, V(g.results)$result)
colnames(results) <-c("Node", "Years Sentenced")

V(g.results)[result == 0]$color <- '#00B2E5' 
V(g.results)[result == 1]$color <- '#2696B7' 
V(g.results)[result == 4]$color <- '#4C7B89' 
V(g.results)[result == 6]$color <- '#72605B' 
V(g.results)[result == 8]$color <- '#98452D' 
V(g.results)[result == 12]$color <- '#BF2A00' 
```


```{r, echo=F}
plot(g.results)
```

A More Realistic Network
========================================================

 Barabási–Albert model - a random, scale-free newtwork that commonly arises in human networks:
```{r, echo=FALSE}
g <- barabasi.game(20)
V(g)$strategy <- sample(c(1,2), size = length(V(g)), replace = T)
plot(g)
```